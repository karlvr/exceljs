{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/drawing-xform.js"],"names":["utils","require","XmlStream","BaseXform","TwoCellAnchorXform","OneCellAnchorXform","WorkSheetXform","module","exports","map","useOneCellAnchor","model","range","ext","reconcileOneCellAnchor","inherits","DRAWING_ATTRIBUTES","tag","prepare","twoCellAnchorXform","anchors","forEach","item","index","oneCellAnchorXform","render","xmlStream","openXml","StdDocAttributes","openNode","closeNode","parseOpen","node","parser","name","reset","parseText","text","parseClose","push","undefined","reconcile","options","anchor"],"mappings":"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","file":"drawing-xform.js","sourcesContent":["/**\n * Copyright (c) 2016-2017 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar utils = require('../../../utils/utils');\nvar XmlStream = require('../../../utils/xml-stream');\n\nvar BaseXform = require('../base-xform');\nvar TwoCellAnchorXform = require('./two-cell-anchor-xform');\nvar OneCellAnchorXform = require('./one-cell-anchor-xform');\n\nvar WorkSheetXform = module.exports = function() {\n  this.map = {\n    'xdr:twoCellAnchor': new TwoCellAnchorXform(),\n    'xdr:oneCellAnchor': new OneCellAnchorXform()\n  };\n};\n\nfunction useOneCellAnchor(model) {\n  return typeof model.range === 'object' && model.range.ext\n}\n\nfunction reconcileOneCellAnchor(model) {\n  return !!model.ext\n}\n\nutils.inherits(WorkSheetXform, BaseXform, {\n  DRAWING_ATTRIBUTES: {\n    'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',\n    'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main'\n  }\n}, {\n  get tag() { return 'xdr:wsDr'; },\n\n  prepare: function(model) {\n    var twoCellAnchorXform = this.map['xdr:twoCellAnchor'];\n    model.anchors.forEach(function(item, index) {\n      if (!useOneCellAnchor(item)) {\n        twoCellAnchorXform.prepare(item, {index: index});\n      }\n    });\n\n    var oneCellAnchorXform = this.map['xdr:oneCellAnchor'];\n    model.anchors.forEach(function(item, index) {\n      if (useOneCellAnchor(item)) {\n        oneCellAnchorXform.prepare(item, {index: index});\n      }\n    });\n  },\n\n  render: function(xmlStream, model) {\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode(this.tag, WorkSheetXform.DRAWING_ATTRIBUTES);\n\n    var twoCellAnchorXform = this.map['xdr:twoCellAnchor'];\n    model.anchors.forEach(function(item) {\n      if (!useOneCellAnchor(item)) {\n        twoCellAnchorXform.render(xmlStream, item);\n      }\n    });\n\n    var oneCellAnchorXform = this.map['xdr:oneCellAnchor'];\n    model.anchors.forEach(function(item) {\n      if (useOneCellAnchor(item)) {\n        oneCellAnchorXform.render(xmlStream, item);\n      }\n    });\n\n    xmlStream.closeNode();\n  },\n\n  parseOpen: function(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.reset();\n        this.model = {\n          anchors: [],\n        };\n        break;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        break;\n    }\n    return true;\n  },\n\n  parseText: function(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n\n  parseClose: function(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.anchors.push(this.parser.model);\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        return false;\n      default:\n        // could be some unrecognised tags\n        return true;\n    }\n  },\n\n  reconcile: function(model, options) {\n    model.anchors.forEach(anchor => {\n      if (reconcileOneCellAnchor(anchor)) {\n        this.map['xdr:oneCellAnchor'].reconcile(anchor, options);\n      } else {\n        this.map['xdr:twoCellAnchor'].reconcile(anchor, options);\n      }\n    });\n  }\n});\n"]}